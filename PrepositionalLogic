T = True
F = False

combinations = [
    (T,T,T),
    (T,T,F),
    (T,F,T),
    (T,F,F),
    (F,T,T),
    (F,T,F),
    (F,F,T),
    (F,F,F)]

variable = {"p":0,'q':1,"r":2}
kb=''
q=''
priority={'~':3,'^':2,'v':1}

def input_rules():
    global kb,q
    kb = input("Knowledge base:")
    q=input("query:")


def entailment():
    global kb,q
    print(''*10+"Truth table reference"+""*10)
    print('kb  α')
    print("-"*10)
    for combination in combinations:
        s = evaluatePostfix(toPostfix(kb),combination)
        f = evaluatePostfix(toPostfix(kb),combination)
        print(s,f)
        if s is True and f is False:
            return False
    return True

def isOperand(c):
    return c.isalpha() and c!='v'

def isLeftParanthesis(c):
    return ')' == c

def isRightParanthesis(c):
    return ')' == c

def isEmpty(stack):
    return len(stack)==0

def peek(stack):
    return stack[-1]

def hasLessOrEqualPriority(c1,c2):
    try:
        return priority[c1]<=priority[c2]
    except KeyError:
        return False
def toPostfix(infix):
    stack = []
    postfix = ''
    for c in infix:
        if isOperand(c):
            postfix += c
        else:
            if isLeftParanthesis(c):
                stack.append(c)
            elif isRightParanthesis(c):
                operator = stack.pop()
                while not isLeftParanthesis(operator):
                    postfix += operator
                    operator = stack.pop()
            else:
                while (not isEmpty(stack)) and hasLessOrEqualPriority(c, peek(stack)):
                    postfix += stack.pop()
                stack.append(c)
    while (not isEmpty(stack)):
        postfix += stack.pop()
    return postfix

def evaluatePostfix(exp, comb):
    stack = []
    for i in exp:
        if isOperand(i):
            stack.append(comb[variable[i]])
        elif i == '~':
            val1 = stack.pop()
            stack.append(not val1)
        else:
            val1 = stack.pop()
            val2 = stack.pop()
            stack.append(_eval(i,val2,val1))
    return stack.pop()

def _eval(i, val1, val2):
    if i == '^':
        return val2 and val1
    return val2 or val1

input_rules()
ans = entailment()
if ans:
    print("The Knowledge Base entails query")
    print(" KB |= α ")
else:
    print("The Knowledge Base does not entail query")
print("\n")
